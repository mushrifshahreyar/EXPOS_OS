if(R1 == 1) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while([SYSTEM_STATUS_TABLE + 2] == 0) do
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;
        call MOD_5;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
    endwhile;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    alias i R7;
    i = 81;
    while(i < 128) do
        if([MEMORY_FREE_LIST + i] == 0) then
            break;
        endif;
        i = i + 1;    
    endwhile;
    [MEMORY_FREE_LIST + i] = [MEMORY_FREE_LIST + i] + 1;
    R0 = i;
    return;
endif;

if(R1 == 2) then
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
    if([MEMORY_FREE_LIST + R2] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    
        alias i R5;
        i = 1;
        while(i < 16) do
            if([PROCESS_TABLE + (i * 16) + 4] ==  WAIT_MEM) then
                [PROCESS_TABLE + (i * 16) + 4] = READY;
            endif;
            i = i + 1;
        endwhile;
    endif;
    
    return;
endif;
if(R1 == 3) then
    alias i R2;
    i = DISK_FREE_AREA;
    while(i < DISK_SWAP_AREA) do
        if([DISK_FREE_LIST + i] == 0) then
            break;
        endif;
        i = i + 1;
    endwhile;

    if(i == DISK_SWAP_AREA) then
        R0 = -1;
        return;
    endif;

    [DISK_FREE_LIST + i] = 1;
    R0 = i;
    return;
    
endif;

if(R1 == 4) then
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
    return;
endif;

if(R1 == 5) then
    alias blockno R2;
    alias i R4;
    alias k R5;
    alias temp R6;
    temp = 0;
    i = 0;
    
    while(i<16) do
        if(i == [SYSTEM_STATUS_TABLE + 1]) then
            i = i + 1;
            continue;
        endif;
        k = 4;
        while(k < 8) do
            if([DISK_MAP_TABLE + (i * 10) + k] == blockno) then
                temp = 1;
                break;
            endif;
            k = k + 1;
        endwhile;
        if(temp == 1) then
            break;
        endif;
        i = i + 1;
    endwhile;
    if(temp == 0) then
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
            R1 = 1;
            call MOD_2;
            R10 = R0;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
        R11 = R2;
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
            R1 = 2;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = R10;
            R4 = R11;
            call MOD_4;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
        
        R0 = R10;
        return;
    else
        alias ptbr R7;
        ptbr = [PROCESS_TABLE + (i * 16) + 14];
        
        if([ptbr + (2 * k) != -1]) then
            R0 = [ptbr + (2 * k)];
            [MEMORY_FREE_LIST + [ptbr + (2 * k)]] = [MEMORY_FREE_LIST + [ptbr + (2 * k)]] + 1;
        else 
            multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
                R1 = 1;
                call MOD_2;
                R10 = R0;
            multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
            R11 = R2;
            multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
                R1 = 2;
                R2 = [SYSTEM_STATUS_TABLE + 1];
                R3 = R10;
                R4 = R11;
                call MOD_4;
            multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
    
            R0 = R10;
            
        endif;
        return;
    endif;

endif;

R0 = -1;
return;