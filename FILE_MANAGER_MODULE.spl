alias functionNo R1;
if(functionNo == 2) then
    alias diskBlockNo R2;
    alias offset R3;
    alias physicalAddr R4;
    alias bufferNo R10;
    bufferNo = diskBlockNo % 4;
    multipush(R1,R2,R3,R4,R10);
        R1 = 1;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = bufferNo;
        call MOD_0;
    multipop(R1,R2,R3,R4,R5);

    if([BUFFER_TABLE + (bufferNo * 4) + 0] != diskBlockNo) then
        if([BUFFER_TABLE + (bufferNo * 4) + 1] == 1) then
            //Storing in the Disk
            multipush(R1,R2,R3,R4,R10);
                R1 = 1;
                R2 = [SYSTEM_STATUS_TABLE + 1];
                R3 = (70 + bufferNo);
                R4 = [BUFFER_TABLE + (bufferNo * 4) + 0];
                call MOD_4;
            multipop(R1,R2,R3,R4,R10);
            [BUFFER_TABLE + (bufferNo * 4) + 1] = 0;
        endif;
        //Loading from Disk
        multipush(R1,R2,R3,R4,R10);
            R1 = 2;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = (70 + bufferNo);
            R4 = diskBlockNo;
            call MOD_4;
        multipop(R1,R2,R3,R4,R10); 

        [BUFFER_TABLE + (bufferNo * 4) + 0] = diskBlockNo;
    endif;

    [physicalAddr] = [((70 + bufferNo) * 512) + offset];

    multipush(R1,R2,R3,R4,R10);
        R1 = 2;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = bufferNo;
        call MOD_0;
    multipop(R1,R2,R3,R4,R10);

    return;
endif;

if(functionNo == 3) then
    alias filename R2;
    alias i R10;
    i = 0;
    while(i < 60) do
        if([INODE_TABLE + (i * 16) + 1] == filename) then
            break;
        endif;
        i = i + 1;
    endwhile;
    if(i == 60) then
        R0 = -1;
        return;
    endif;

    multipush(R0,R1,R2,R10);
        R1 = 4;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = i;
        call MOD_0;
    multipop(R0,R1,R2,R10);

    if(R0 == -1) then
        R0 = -1;
        return;
    endif;

    if([INODE_TABLE + (i * 16) + 0] == EXEC) then
        multipush(R0,R1,R2,R3,R10);
            R1 = 5;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = i;
            call MOD_0;
        multipop(R0,R1,R2,R3,R10);

        R0 = -1;
        return;
    endif;

    alias j R11;
    j = 0;
    while(j < 32) do
        if([OPEN_FILE_TABLE + (j * 4) + 0] == -1) then
            break;
        endif;      
        j = j + 1;
    endwhile;

    if(j == 32) then
        multipush(R0,R1,R2,R3,R10,R11);
            R1 = 5;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = i;
            call MOD_0;
        multipop(R0,R1,R2,R3,R10,R11);

        R0 = -1;
        return;
    endif;

    if(i == 0) then
        [OPEN_FILE_TABLE + (j * 4) + 0] = INODE_ROOT;
    else
        if([FILE_STATUS_TABLE + (i * 4) + 1] == -1) then
            [FILE_STATUS_TABLE + (i * 4) + 1] = 1;
        else
            [FILE_STATUS_TABLE + (i * 4) + 1] = [FILE_STATUS_TABLE + (i * 4) + 1] + 1;
        endif;

        [OPEN_FILE_TABLE + (j * 4) + 0] = R3;
    endif;
    [OPEN_FILE_TABLE + (j * 4) + 1] = 1;
    [OPEN_FILE_TABLE + (j * 4) + 2] = 0;

    multipush(R0,R1,R2,R3,R10,R11);
            R1 = 5;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = i;
            call MOD_0;
    multipop(R0,R1,R2,R3,R10,R11);

    R0 = j;
    return;
endif;

if(functionNo == 4) then
    alias inode_index R3;
    alias open_file_table R4;
    open_file_table = OPEN_FILE_TABLE + (R2 * 4);
    inode_index = [open_file_table + 0];
    [open_file_table + 1] = [open_file_table + 1] - 1;
    if([open_file_table + 1] == 0) then
        [open_file_table + 0] = -1;
        [open_file_table + 1] = -1;
        [open_file_table + 2] = -1;  
        if(inode_index != 0) then
            [FILE_STATUS_TABLE + (inode_index * 4) + 1] = [FILE_STATUS_TABLE + (inode_index * 4) + 1] - 1;
            if([FILE_STATUS_TABLE + (inode_index * 4) + 1] == 0)
                [FILE_STATUS_TABLE + (inode_index * 4) + 1] = -1;
            endif;
        endif;
    endif;

    return;
endif;