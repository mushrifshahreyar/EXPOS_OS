alias functionno R1;
alias pid R2;
if(functionno == 2) then
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
    functionno = 3;
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
    alias page_no R3;
    alias block_no R4;
    [DISK_STATUS_TABLE + 0] = 1;
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = page_no;
    [DISK_STATUS_TABLE + 3] = block_no;
    [DISK_STATUS_TABLE + 2] = pid;

    load(page_no,block_no);

    [PROCESS_TABLE + (pid * 16) + 4] = WAIT_DISK;
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
    call MOD_5;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
    
    return;
endif;
if(functionno == 3) then
    //ACQUIRE
    
    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
    functionno = 8;
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);
    alias word R3;
    print word;
    
    //RELEASE
    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
    functionno = 9;
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);

    return;
endif;  
if(functionno == 4) then
    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
    functionno = 8;
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);
    read;
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_TERMINAL;
    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
    call MOD_5;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);
    alias word R3;
    alias newword R4;
    newword = ([PTBR + 2 * (word/512)] * 512) + (word % 512);
    [newword] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 8];
    
    return;
else
    R0 = -1;
    return;
endif;
