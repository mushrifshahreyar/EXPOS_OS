alias UserSP R0;
UserSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 9;
alias filename R1;
filename = [[PTBR + 2 * ((UserSP - 2)/512)] * 512 + ((UserSP - 2) % 512)];
alias i R2;
i = 1;
while(i <= 60) do
    if([INODE_TABLE + (i * 16) + 1] == filename) then
        break;
    endif;
    i = i + 1;
endwhile;

if(i == 61) then
    alias returnval R3;
    returnval = [PTBR + 2 * ((UserSP - 1)/512)] * 512 + ((UserSP - 1) % 512);
    [returnval] = -1;
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE] * 16) + 13];
    ireturn;
else
    if([INODE_TABLE + (i * 16) + 0] != 3) then
        alias returnv R3;
        returnv = [PTBR + 2 * ((UserSP - 1)/512)] * 512 + ((UserSP - 1) % 512);
        [returnv] = -1;
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE] * 16) + 13];
        ireturn;
    endif;
    alias pid R4;
    pid = [SYSTEM_STATUS_TABLE + 1];
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    alias succReturnval R5;
    alias UserPage R6;
    UserPage = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11];
    [MEMORY_FREE_LIST + UserPage] = 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;

    SP = UserPage * 512 - 1;
    [PROCESS_TABLE + (pid * 16) + 1] = pid;
    [PROCESS_TABLE + (pid * 16) + 4] = RUNNING;
    [PROCESS_TABLE + (pid * 16) + 7] = i;
    [PROCESS_TABLE + (pid * 16) + 12] = 0;
    
    [PTBR + 0] = 63;
    [PTBR + 1] = "0100";
    [PTBR + 2] = 64;
    [PTBR + 3] = "0100";
    
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = 1;
    call MOD_2;
    R10 = R0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    [PTBR + 4] = R10;
    [PTBR + 5] = "0110";
    
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = 1;
    call MOD_2;
    R10 = R0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    [PTBR + 6] = R10;
    [PTBR + 7] = "0110";
    
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = 1;
    call MOD_2;
    R10 = R0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);

    [PTBR + 8] = R10;
    [PTBR + 9] = "0100";
    [PTBR + 10] = -1;
    [PTBR + 11] = "0000";
    [PTBR + 12] = -1;
    [PTBR + 13] = "0000";
    [PTBR + 14] = -1;
    [PTBR + 15] = "0000";
    
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = 1;
    call MOD_2;
    R10 = R0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    [PTBR + 16] = R10;
    [PTBR + 17] = "0110";
    
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = 1;
    call MOD_2;
    R10 = R0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    [PTBR + 18] = R10;
    [PTBR + 19] = "0110";

    
    alias temp1 R11;
    alias temp2 R12;
    temp1 = [PTBR + 8];
    temp2 = [INODE_TABLE + (i * 16) + 8];
    
    //loadi([PTBR + 8],[INODE_TABLE + (i * 16) + 8]);
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = 2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = temp1;
    R4 = temp2;
    call MOD_4;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    

    [[PTBR + 16] * 512] = [([PTBR + 8] * 512) + 1];

    SP = 8 * 512;
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

    alias per_process_table R13;
    per_process_table = UserPage * 512 + 490;
    alias c R14;
    c = 0;
    while(c < 16) do
        [per_process_table + c] = -1;
        c = c + 1;
    endwhile;
    ireturn;
endif;
