[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 7;
alias userSP R0;
alias fileDesc R1;
alias retAddr R2;

retAddr = ([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP-1) % 512);
fileDesc = [([PTBR + 2 * ((userSP-4)/512)] * 512) + ((userSP-4) % 512)];
userSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

if(fileDesc != -1) then
    if(fileDesc < 0 || fileDesc >=8) then
        [retAddr] = -1;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        ireturn;
    endif;
    alias resource_table R3;
    resource_table = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 + 495;
    if([resource_table + (fileDesc * 2) + 0] != 0) then
        [retAddr] = -1;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        ireturn;
    endif;
    alias open_file R4;
    open_file = [resource_table + (fileDesc * 2) + 1];
    alias inode_index R5;
    inode_index = [OPEN_FILE_TABLE + (open_file * 4) + 0];
    alias mod_ret R10;
    multipush(R0,R1,R2,R3,R4,R5);
        R1 = 4;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inode_index;
        call MOD_0;
        mod_ret = R0;
    multipop(R0,R1,R2,R3,R4,R5);
    if(mod_ret == -1) then
        [retAddr] = -1;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        ireturn;
    endif;

    alias lseek R6;
    lseek = [OPEN_FILE_TABLE + (open_file * 4) + 2];
    alias physicalAddr R7;
    physicalAddr = [([PTBR + 2 *((userSP - 3)/512)] * 512) + ((userSP - 3) % 512)];
    if([OPEN_FILE_TABLE + (open_file * 4) + 0] == INODE_ROOT) then
        if(lseek == 480) then
            multipush(R0,R1,R2,R3,R4,R5,R6,R7);
                R1 = 5;
                R2 = [SYSTEM_STATUS_TABLE + 1];
                R3 = inode_index;
                call MOD_0;
            multipop(R0,R1,R2,R3,R4,R5,R6,R7);
            [retAddr] = -2;
            SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
            [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
            ireturn;
        endif;
        [physicalAddr] = [ROOT_FILE + lseek];
        lseek = lseek + 1;
    else
        if(lseek == [INODE_ROOT + (inode_index) + 2]) then
            multipush(R0,R1,R2,R3,R4,R5,R6,R7);
                R1 = 5;
                R2 = [SYSTEM_STATUS_TABLE + 1];
                R3 = inode_index;
                call MOD_0;
            multipop(R0,R1,R2,R3,R4,R5,R6,R7);
            [retAddr] = -2;
            SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
            [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
            ireturn;
        endif;
        //calling buffer buffer read
        multipush(R0,R1,R2,R3,R4,R5,R6,R7);
            R1 = 2;
            R2 = [INODE_TABLE + (inode_index * 16) + 8 + (lseek / 512)];
            R3 = lseek % 512;
            R4 = physicalAddr;
            call MOD_3;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7);

        lseek = lseek + 1;
    endif;
    
    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
        R1 = 5;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inode_index;
        call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);

    [retAddr] = 0;

else

    alias word R3;
    word = [([PTBR + 2 *((userSP - 3)/512)] * 512) + ((userSP - 3) % 512)];
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = word;
    call MOD_4;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
    [retAddr] = 0;
endif;

restore;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
ireturn;