[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

if([SYSTEM_STATUS_TABLE + 5] != 0) then
    //Calling of swapin or swapout
    if([SYSTEM_STATUS_TABLE + 1] == 15 && [SYSTEM_STATUS_TABLE + 5] == SWAP_IN) then
        R1 = 1;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_6;
    endif;

    if([SYSTEM_STATUS_TABLE + 1] == 15 && [SYSTEM_STATUS_TABLE + 5] == SWAP_OUT) then
        //swapout
        R1 = 2;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_6;
    endif;

    if([SYSTEM_STATUS_TABLE + 1] == 0) then
        //nothing doing
    endif;
else
    if([SYSTEM_STATUS_TABLE + 2] < MEM_LOW) then
        [SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;

    else 
        if([SYSTEM_STATUS_TABLE + 4] > 0) then
            

        endif;
    endif;





    
endif;

alias i R10;
i = 0;
//Modification---
while(i < 16) do
    if([PROCESS_TABLE + (i * 16) + 4] != TERMINATED) then
        [PROCESS_TABLE + (i * 16) + 0] = [PROCESS_TABLE + (i * 16) + 0] + 1;
    endif;
    i = i + 1;
endwhile;
//-----

if([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] == RUNNING) then
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = READY;
endif;

call MOD_5;
restore;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
ireturn;