alias userSP R0;
alias filedesc R1;
alias physicalAddrRetVal R2;
alias pcb R15;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 5;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 -1;
pcb = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);
filedesc = [([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);

backup;

if(filedesc != -2) 
then
    if(filedesc < 0 || filedesc >=8) then
        [physicalAddrRetVal] = -1;
        [pcb + 9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;

    alias resource_table R3;
    resource_table = [pcb + 11] * 512 + 495;

    if([resource_table + (filedesc * 2) + 0] != 0) then
        [physicalAddrRetVal] = -1;
        [pcb + 9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;

    alias open_file R4;
    alias inode_index R5;

    open_file = [resource_table + (filedesc * 2) + 1];
    inode_index = [OPEN_FILE_TABLE + (open_file * 4) + 0];

    if(([pcb + 3] != 1) && ([pcb + 3] != [INODE_TABLE + (inode_index * 16) + 3])) then
        [physicalAddrRetVal] = -3;
        [pcb + 9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;
    alias mod_ret R10;
    //Acquire Inode
    multipush(R0,R1,R2,R3,R4,R5);
        R1 = 4;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inode_index;
        call MOD_0;
        mod_ret = R0;
    multipop(R0,R1,R2,R3,R4,R5);
    if(mod_ret == -1) then
        [physicalAddrRetVal] = -1;
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
        ireturn;
    endif;
    alias lseek R6;
    lseek = [OPEN_FILE_TABLE + (open_file * 4) + 2];

    if(lseek == MAX_FILE_SIZE) then
        [physicalAddrRetVal] = -2;
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
        ireturn;
    endif;

    if(lseek % 512 == 0 && lseek == [INODE_TABLE + (inode_index * 16) + 2]) then
        multipush(R0,R1,R2,R3,R4,R5,R6);
            R1 = 3;
            call MOD_2;
            mod_ret = R0;
        multipop(R0,R1,R2,R3,R4,R5,R6);
        if(mod_ret == -1) then
            //Releasing INODE if no disk space is remaining
            multipush(R0,R1,R2,R3,R4,R5,R6);
                R1 = 5;
                R2 = [SYSTEM_STATUS_TABLE + 1];
                R3 = inode_index;
                call MOD_0; 
            multipop(R0,R1,R2,R3,R4,R5,R6);

            [physicalAddrRetVal] = -2;
            [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
            SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
            ireturn;
        endif;
        [INODE_TABLE + (inode_index * 16) + 8 + (lseek / 512)] = mod_ret;
    endif;
    alias word R7;
    word = [([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];
    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
        R1 = 2;
        R2 = [INODE_TABLE + (inode_index * 16) + 8 + (lseek/512)];
        R3 = lseek % 512;
        R5 = word;
        R6 = 0;
        call MOD_3;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);
    if(lseek == [INODE_TABLE + (inode_index * 16) + 2]) then
        [INODE_TABLE + (inode_index * 16) + 2] = [INODE_TABLE + (inode_index * 16) + 2] + 1;
        [ROOT_FILE + (inode_index * 8) + 1] = [ROOT_FILE + (inode_index * 8) + 1] + 1;
    endif;

    [OPEN_FILE_TABLE + (open_file * 4) + 2] = [OPEN_FILE_TABLE + (open_file * 4) + 2] + 1;

    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
        R1 = 5;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = inode_index;
        call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);

    [physicalAddrRetVal] = 0;


else
    alias word R5;
    word = [([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];
    
    multipush(R0,R1,R2,R3,R4,R5);
        
        R1 = 3;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = word;
        call MOD_4;

    multipop(R0,R1,R2,R3,R4,R5);
    [physicalAddrRetVal] = 0;
endif;

restore;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;

ireturn;

