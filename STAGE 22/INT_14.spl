alias userSP R0;
alias sys_call R1;
alias sem_desc R2;
userSP = SP;
sys_call = [([PTBR + 2 * ((userSP - 5)/512)] * 512) + ((userSP - 5) % 512)];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = sys_call;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

sem_desc = [([PTBR + 2 * ((userSP - 4)/512)] * 512) + ((userSP - 4) % 512)];

if(sys_call == 19) then
    
    alias per_process_table R3;
    per_process_table = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512  + 495;
    
    if((sem_desc < 0) && (sem_desc >= 8) ) then
        [([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];        
        ireturn;
    endif;

    if([per_process_table + (sem_desc * 2) + 0] != 1) then
        [([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];        
        ireturn;
    endif;

    alias sem_table_index R4;
    sem_table_index = [per_process_table + (sem_desc * 2) + 1];

    while([SEMAPHORE_TABLE + (sem_table_index * 4) + 0] != -1) do
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_SEMAPHORE;
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 5] = sem_table_index;
        multipush(R0,R1,R2,R3,R4,R5,R6);
            call MOD_5;
        multipop(R0,R1,R2,R3,R4,R5,R6);
    endwhile;

    [SEMAPHORE_TABLE + (sem_table_index * 4) + 0] = [SYSTEM_STATUS_TABLE + 1];
    [([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512)] = 0;
endif;

if(sys_call == 20) then
    if((sem_desc < 0) && (sem_desc >= 8) ) then
        [([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];        
        ireturn;
    endif;

    alias per_process_table R3;
    per_process_table = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512  + 495;
    
    if([per_process_table + (sem_desc * 2) + 0] != 1) then
        [([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
        SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];        
        ireturn;
    endif;
    
    alias sem_table_index R4;
    sem_table_index = [per_process_table + (sem_desc * 2) + 1];

    if([SEMAPHORE_TABLE + (sem_table_index * 4) + 0] != -1) then
        if([SEMAPHORE_TABLE + (sem_table_index * 4) + 0] != [SYSTEM_STATUS_TABLE + 1]) then
            [([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512)] = -2;
            [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
            SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];        
            ireturn;
        endif;

        [SEMAPHORE_TABLE + (sem_table_index * 4) + 0] = -1;
        alias i R5;
        i = 0;
        while(i < 16) do
            if(([PROCESS_TABLE + (i * 16) + 4] == WAIT_SEMAPHORE)  && ([PROCESS_TABLE + (i * 16) + 5] == sem_table_index)) then
                [PROCESS_TABLE + (i * 16) + 4] = READY;
            endif;
            i = i + 1;
        endwhile;
    endif;

    [([PTBR + 2 * ((userSP - 1)/512)] * 512) + ((userSP - 1) % 512)] = 0;
endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;